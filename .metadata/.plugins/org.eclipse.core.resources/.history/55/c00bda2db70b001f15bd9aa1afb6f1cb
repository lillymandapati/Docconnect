package com.admin.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.admin.annotations.PositiveLong;
import com.admin.dto.ApprovalRequestDto;
import com.admin.dto.LoginRequestDto;
import com.admin.dto.Message;
import com.admin.dto.UpdateUserDto;
import com.admin.dto.UpdateUserPasswordDto;
import com.admin.dto.UserDto;
import com.admin.service.UserService;
import com.admin.util.Constants;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import lombok.extern.log4j.Log4j2;

@Log4j2
@RestController
@Validated
@RequestMapping("/admin")
public class UserRegistrationController {

	@Autowired
	private UserService userService;

	@Autowired
	private Message message;

	@PostMapping("/register")
	public ResponseEntity<?> registerUser(@Valid @RequestBody UserDto request) {

		log.info("In UserRegistrationController registerUser() with request :" + request);
		if (!request.getConfirmPassword().equals(request.getPassword())) {
			message.setMessage(Constants.CONFIRM_PASSWORD_NOT_MATCH);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);
		} else if (request.getRollId() != Constants.ADMIN_ROLE_ID && request.getRollId() != Constants.USER_ROLE_ID) {
			message.setMessage(Constants.INVALID_ROLE_ID);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);
		} else {
			return userService.userRegistration(request);
		}
	}

	@PostMapping("/login")
	public ResponseEntity<?> userLogin(@Valid @RequestBody LoginRequestDto request) {
		log.info("In UserRegistrationController userLogin() with request :" + request);
		return userService.userLogin(request);
	}
	@PostMapping("/logout")
    public ResponseEntity<?> logout(HttpServletRequest request, HttpServletResponse response) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null) {
            new SecurityContextLogoutHandler().logout(request, response, auth);
        }
        return ResponseEntity.ok("Logout successful");
    }
	@PutMapping("/updateUser")
	public ResponseEntity<?> userUpdate(@Valid @RequestBody UpdateUserDto request) {
		log.info("In UserRegistrationController userUpdate() with request :" + request);
		return userService.userUpdate(request);
	}

	@PutMapping("/updatePassword")
	public ResponseEntity<?> changePassword(@Valid @RequestBody UpdateUserPasswordDto passwordDto) {
		log.info("In UserRegistrationController changePassword() " + passwordDto.getEmployeeId());
		if (!passwordDto.getConfirmPassword().equals(passwordDto.getPassword())) {
			message.setMessage(Constants.CONFIRM_PASSWORD_NOT_MATCH);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);
		} else {
			return userService.updatePassword(passwordDto);
		}
	}

	@GetMapping("/getAllUsers")
	public ResponseEntity<?> getData() {
		log.info("In UserRegistrationController getData() " );
		return userService.getAllUsers();
	}

	@GetMapping("/getByUserId")
	public ResponseEntity<?> getUserById(@RequestParam("userId") long userId) {
		log.info("In UserRegistrationController getUserById() for userId: " + userId);
		return userService.getUserId(userId);
	}

	@DeleteMapping("/deleteByUserId")
	public ResponseEntity<?> deleteByEmployeeId(
			@RequestParam("userId") @NotNull(message = "{notNull.userId}") @PositiveLong(message = "{positiveLong.userId}") long userId) {
		log.info("In UserRegistrationController deleteByuserId() for employeeId: " + userId);
		return userService.deleteUserId(userId);
	}
	@GetMapping("/get")
	public ResponseEntity<?> getByUsername(@RequestParam("username") String username) {
		log.info("In UserRegistrationController getByUsername() for userId: " + username);
		return userService.getUserByUserEmail(username);
	}

}